:- module(chr_test,[]).
:- use_module(library(chr)).

% Definitie van het data type lijst.
:- chr_type list(T) ---> [] ; [T | list(T)].
:- chr_type xvalue == natural.
:- chr_type yvalue == natural.
:- chr_type position ---> (xvalue,yvalue).
% natural is positieve integer.
% De waarde van een paar (element) kan een natural zijn of een domein(lijst van naturals)
:- chr_type num ---> natural ; [natural | list(natural)].

:- chr_constraint posElement(+position,+num), choiceNumber/0, element(+position,+natural), printBoard(+natural,+natural).

solve(SudokuBoard) :- 
        makeBoardDomain(SudokuBoard,1),
        printBoard(1,1).

makeBoardDomain([],_).
makeBoardDomain([Row|Board],RowNumber) :-
        makeRowDomain(Row,RowNumber,1),
        RowNumberNext is RowNumber + 1,
        makeBoardDomain(Board,RowNumberNext).

makeRowDomain([],_,_).
makeRowDomain([Element|RestRow],RowNumber,ColumnNumber) :-
        var(Element),
        posElement((RowNumber,ColumnNumber), [1,2,3,4,5,6,7,8,9]),
        choiceNumber,
        Column2 is ColumnNumber + 1,
        makeRowDomain(RestRow,RowNumber,Column2).
makeRowDomain([],_,_).
makeRowDomain([Element|RestRow],RowNumber,ColumnNumber) :-
        nonvar(Element),
        element((RowNumber,ColumnNumber), Element),
        Column2 is ColumnNumber + 1,
        makeRowDomain(RestRow,RowNumber,Column2).

choiceNumber, posElement((X,Y),L) <=> member(N,L), element((X,Y), N).

rowConstraint @ element((X,Y1),A), element((X,Y2),A) <=> Y1 == Y2.

printBoard(9,9), element((9,9),A) <=> writeln(A).
printBoard(K,9), element((K,9),A) <=> writeln(A), K1 is K + 1, printBoard(K1,1).
printBoard(K,L), element((K,L),A) <=> write(A), Y is L + 1, printBoard(K,Y).
